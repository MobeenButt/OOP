using System;

namespace studentManagement
{
    internal class Program
    {
        static Manage[] student = new Manage[100];
        static int studentCount = 0;
        static void Main(string[] args)
        {
            Display();
        }
        static void ADDSTUDENT()
        {
            string name;
            float matricMarks;
            float fscMarks;
            float ecatMarks;

            Console.Clear();
            Console.Write("Enter your name: ");
            name = Console.ReadLine();
            Console.Write("Enter your Matric Marks:");
            matricMarks = float.Parse(Console.ReadLine());
            Console.Write("Enter your FSC Marks: ");
            fscMarks = float.Parse(Console.ReadLine());
            Console.Write("Enter your Ecat Marks: ");
            ecatMarks = float.Parse(Console.ReadLine());
            if (studentCount < student.Length)
            {
                student[studentCount++] = new Manage(name, matricMarks, fscMarks, ecatMarks);
                Console.WriteLine("Press any key to Continue!");
                Console.ReadKey();
                Console.WriteLine("Student Added Successfully!");
                SHOWSTUDENT(student);
            }
            else
            {
                Console.WriteLine("Cannot add more student. Array is full.");
            }

        }
        static void Display()
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine("\t\t\t\t\tSTUDENT MANAGEMENT SYSTEM\t\t\t");
                Console.WriteLine("\t\t\t\t\t  1. Add Student");
                Console.WriteLine("\t\t\t\t\t  2. Show Students");
                Console.WriteLine("\t\t\t\t\t  3. Calculate Aggregate");
                Console.WriteLine("\t\t\t\t\t  4. Top Students");
                Console.WriteLine("\t\t\t\t\t  5. Exit");


                string option;
                Console.WriteLine("Choose your option :");
                option = Console.ReadLine();

                if (option == "1")
                {
                    Console.Clear();
                    ADDSTUDENT();
                }
                else if (option == "2")
                {

                    for (int i = 0; i < studentCount; i++)
                    {
                        SHOWSTUDENT(student);
                        Console.WriteLine("Press any key to Continue...");
                        Console.ReadKey();
                        Display();
                    }

                }
                else if (option == "3")
                {
                    Console.Clear();
                    CALCULATEAGG(student);
                    Console.WriteLine("Press any key to Continue...");
                    Console.ReadKey();

                }
                else if (option == "4")
                {
                    TOP();
                    Console.WriteLine("Press any key to Continue...");
                    Console.ReadKey();
                    Display();
                }

                else
                {
                    Console.WriteLine("Invalid Choice!");
                }
            }
        }
        static void SHOWSTUDENT(Manage[] student)
        {
            Console.Clear();
            for (int i = 0; i < studentCount; i++)
            {

                Console.WriteLine($"Name: {student[i].name}  Matric-Marks: {student[i].matricMarks}  Fsc-Marks: {student[i].fscMarks}  ECAT-Marks: {student[i].ecatMarks}  Aggregate: {student[i].aggregate}");

            }
        }
        static void CALCULATEAGG(Manage[] student)
        {

            for (int i = 0; i < student.Length; i++)
            {
                if (student[i] != null)
                {
                    student[i].aggregate = (float)((student[i].matricMarks * 0.9) + (student[i].fscMarks * 0.6) + (student[i].ecatMarks * 0.33));
                }
            }
            for (int i = 0; i < student.Length; i++)
            {
                if (student[i] != null)
                {
                    Console.WriteLine("{0} \t\t {1}", student[i].name, student[i].aggregate);
                }
            }
        }
        static void TOP()
        {
            Console.Clear();
            if (studentCount > 0)
            {
                float[] arr = new float[studentCount];
                for (int i = 0; i < studentCount; i++)
                {
                    arr[i] = student[i].aggregate;
                }

                SortArray(arr);

                // Display top students
                Console.WriteLine("\t\t\tTOP STUDENTS");
                for (int i = 0; i < 3 && i < studentCount; i++)
                {
                    Console.WriteLine("\t\tAggregate: {0}",  arr[i]);
                }
            }
            else
            {
                Console.WriteLine("No Student Available");
            }
        }


        static void SortArray(float[] arr)
        {
            for (int i = 0; i < arr.Length-1; i++)
            {
                for (int j = i + 1; j < arr.Length; j++)
                {
                    if (arr[i] > arr[j])
                    {
                        float temp = arr[j];
                        arr[j] = arr[i];
                        arr[i] = temp;
                    }
                }
            }
        }
    }
}
