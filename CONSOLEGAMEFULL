using EZInput;
using System;
using System.Threading;

namespace ConsoleApp5
{
    class Program
    {
        static int height = 27;
        static int width = 100;
        static bool EnemyMove = false;
        static bool EnemyMove2 = false;
        static bool isFiring = false;

        static void Main()
        {

            PLAYER p = new PLAYER('P', 2, 2);

            int number_Enemies = 2;

            ENEMYClass[] e = new ENEMYClass[number_Enemies];
            e[0] = new ENEMYClass('E', 55, 18);
            e[1] = new ENEMYClass('L', 15, 5);


            //int x = 2, y = 2;
            //int x = 55, y = 18;
            //int x2 = 15, y2 = 5;
            MAZE();

            //PLAYER(ref x, ref y);
            //ENEMY(ref x, ref y);
            DISPLAY(p.pX, p.pY, p.Symbol);
            for (int i = 0; i < number_Enemies; i++)
            {
                DISPLAY(e[i].eX, e[i].eY, e[i].Symbol);
            }
            while (true)
            {
                if (Keyboard.IsKeyPressed(Key.LeftArrow))
                {
                    REMOVE(p.pX, p.pY, p.Symbol);
                    MOVE("left", ref p.pX, ref p.pY, ref width);
                    DISPLAY(p.pX, p.pY, p.Symbol);
                }
                else if (Keyboard.IsKeyPressed(Key.RightArrow))
                {
                    REMOVE(p.pX, p.pY, p.Symbol);
                    MOVE("right", ref p.pX, ref p.pY, ref width);
                    DISPLAY(p.pX, p.pY, p.Symbol);
                }
                else if (Keyboard.IsKeyPressed(Key.UpArrow))
                {
                    REMOVE(p.pX, p.pY, p.Symbol);
                    MOVEPLAYERUP("UP", ref p.pX, ref p.pY, ref height);
                    DISPLAY(p.pX, p.pY, p.Symbol);
                }
                else if (Keyboard.IsKeyPressed(Key.DownArrow))
                {
                    REMOVE(p.pX, p.pY, p.Symbol);
                    MOVEPLAYERUP("DOWN", ref p.pX, ref p.pY, ref height);
                    DISPLAY(p.pX, p.pY, p.Symbol);
                }
                /*  else if (Keyboard.IsKeyPressed(Key.Space) && !isFiring)
                  {
                      SHOOT(ref x, ref y, ref x, ref y, ref x2, ref y2);
               
                //}*/

                REMOVE(e[0].eX, e[0].eY, e[0].Symbol);
                MOVEENEMY(ref e[0].eX, ref e[0].eY, ref width);
                DISPLAY(e[0].eX, e[0].eY, e[0].Symbol);
                REMOVE(e[1].eX, e[1].eY, e[1].Symbol);
                MOVEENEMY2UP(ref e[1].eX, ref e[1].eY, ref height);
                DISPLAY(e[1].eX, e[1].eY, e[1].Symbol);
                Thread.Sleep(50);
            }

        }

        static void DISPLAY(int x, int y, char Symbol)
        {
            Console.SetCursorPosition(x, y);
            Console.WriteLine(Symbol);
        }

        //static void ENEMY(ref int x, ref int y)
        //{
        //    Console.SetCursorPosition(x, y);
        //    Console.WriteLine("E");
        //}

        //static void ENEMY2(ref int x2, ref int y2)
        //{
        //    Console.SetCursorPosition(x2, y2);
        //    Console.WriteLine("|E");
        //}

        static void MOVE(string direction, ref int x, ref int y, ref int width)
        {
            //REMOVEPLAYER(ref x, ref y);

            if (direction == "left" && x > 1)
            {
                x = x - 1;
            }
            else if (direction == "right" && x < width)
            {
                x = x + 1;
            }

            //PLAYER(ref x, ref y);
        }

        static void MOVEENEMY(ref int x, ref int y, ref int width)
        {
            //REMOVEENEMY(ref x, ref y);
            Console.SetCursorPosition(x, y);

            if (x > 1 && EnemyMove)
            {
                x = x - 1;
            }
            else if (x < width && !EnemyMove)
            {
                x = x + 1;
            }

            // Switch direction when reaching the boundary
            if (x <= 1 || x >= width)
            {
                EnemyMove = !EnemyMove;
            }

            //ENEMY(ref x, ref y);
        }

        static void MOVEPLAYERUP(string direction, ref int x, ref int y, ref int height)
        {
            //  REMOVEPLAYER(ref x, ref y);

            if (direction == "UP" && y > 1)
            {
                y = y - 1;
            }
            else if (direction == "DOWN" && y < height)
            {
                y = y + 1;
            }

            //  PLAYER(ref x, ref y);
        }

        static void MOVEENEMY2UP(ref int x, ref int y, ref int height)
        {
            //REMOVEENEMY2(ref x2, ref y2);
            Console.SetCursorPosition(x, y);

            if (y > 1 && EnemyMove2)
            {
                y = y - 1;
            }
            else if (y < height && !EnemyMove2)
            {
                y = y + 1;
            }

            // Switch direction when reaching the boundary
            if (y <= 1 || y >= height)
            {
                EnemyMove2 = !EnemyMove2;
            }

            // ENEMY2(ref x, ref  y);
        }

        static void REMOVE(int x, int y, char Symbol)
        {
            Console.SetCursorPosition(x, y);
            Console.WriteLine(' ');
        }

        //static void REMOVEENEMY(ref int x, ref int y)
        //{
        //    Console.SetCursorPosition(x, y);
        //    Console.WriteLine(" ");
        //}

        //static void REMOVEENEMY2(ref int x2, ref int y2)
        //{
        //    Console.SetCursorPosition(x2, y2);
        //    Console.WriteLine("  ");
        //}


        static void REMOVEBULLET(ref int bx, ref int by)
        {
            Console.SetCursorPosition(bx, by);
            Console.WriteLine(" ");
        }
        //static void SHOOT(ref int x, ref int y, ref int x, ref int y, ref int x2, ref int y2)
        //{
        //    int bx = x;
        //    int by = y - 1;

        //    if (isFiring)
        //    {
        //        return; // If already firing, xit the method
        //    }

        //    isFiring = true;

        //    while (by > 1)
        //    {
        //        REMOVEBULLET(ref bx, ref by);
        //        Console.SetCursorPosition(bx, by);
        //        Console.WriteLine("^");

        //        by--;

        //        if ((bx >= x && by >= y) || (bx >= x2 && by >= y2))
        //        {
        //            REMOVEENEMY(ref x, ref y);
        //            REMOVEENEMY2(ref x2, ref y2);
        //            Thread.Sleep(200); // Add a delay to make the hit visible
        //            break;
        //        }

        //        Thread.Sleep(50);
        //    }

        //    REMOVEBULLET(ref bx, ref by); // Clear the bullet after it reaches the top
        //    isFiring = false;
        //}

        static void MAZE()
        {
            Console.Clear();
            Console.WriteLine("######################################################################################################");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                             ###########                                            #");
            Console.WriteLine("#                                             #         #                                            #");
            Console.WriteLine("#                                             #         #                                            #");
            Console.WriteLine("#                                             #         #                                            #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("################                                                                      ################");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("#                                                                                                    #");
            Console.WriteLine("######################################################################################################");
        }
    }
}
